---
Checks: [
  '-clang-diagnostic-#pragma-messages',
  'bugprone-assert-side-effect',
  'bugprone-assignment-in-if-condition',
  'bugprone-bad-signal-to-kill-thread',
  'bugprone-bool-pointer-implicit-conversion',
  'bugprone-branch-clone',
  'bugprone-casting-through-void',
  'bugprone-chained-comparison',
  'bugprone-compare-pointer-to-member-virtual-function',
  'bugprone-copy-constructor-init',
  'bugprone-crtp-constructor-accessibility',
  'bugprone-dangling-handle',
  'bugprone-dynamic-static-initializers',
  'bugprone-empty-catch',
  'bugprone-exception-escape',
  'bugprone-fold-init-type',
  'bugprone-forward-declaration-namespace',
  'bugprone-forwarding-reference-overload',
  'bugprone-implicit-widening-of-multiplication-result',
  'bugprone-inaccurate-erase',
  'bugprone-inc-dec-in-conditions',
  'bugprone-incorrect-enable-if',
  'bugprone-incorrect-roundings',
  'bugprone-infinite-loop',
  'bugprone-integer-division',
  'bugprone-lambda-function-name',
  'bugprone-macro-parentheses',
  'bugprone-macro-repeated-side-effects',
  'bugprone-misplaced-operator-in-strlen-in-alloc',
  'bugprone-misplaced-pointer-arithmetic-in-alloc',
  'bugprone-misplaced-widening-cast',
  'bugprone-move-forwarding-reference',
  'bugprone-multi-level-implicit-pointer-conversion',
  'bugprone-multiple-new-in-one-expression',
  'bugprone-multiple-statement-macro',
  'bugprone-narrowing-conversions',
  'bugprone-no-escape',
  'bugprone-non-zero-enum-to-bool-conversion',
  'bugprone-not-null-terminated-result',
  'bugprone-optional-value-conversion',
  'bugprone-parent-virtual-call',
  'bugprone-pointer-arithmetic-on-polymorphic-object',
  'bugprone-posix-return',
  'bugprone-redundant-branch-condition',
  'bugprone-reserved-identifier',
  'bugprone-return-const-ref-from-parameter',
  'bugprone-shared-ptr-array-mismatch',
  'bugprone-signed-char-misuse',
  'bugprone-sizeof-container',
  'bugprone-sizeof-expression',
  'bugprone-spuriously-wake-up-functions',
  'bugprone-standalone-empty',
  'bugprone-string-constructor',
  'bugprone-string-integer-assignment',
  'bugprone-string-literal-with-embedded-nul',
  'bugprone-stringview-nullptr',
  'bugprone-suspicious-enum-usage',
  'bugprone-suspicious-include',
  'bugprone-suspicious-memory-comparison',
  'bugprone-suspicious-memset-usage',
  'bugprone-suspicious-missing-comma',
  'bugprone-suspicious-realloc-usage',
  'bugprone-suspicious-semicolon',
  'bugprone-suspicious-string-compare',
  'bugprone-suspicious-stringview-data-usage',
  'bugprone-swapped-arguments',
  'bugprone-switch-missing-default-case',
  'bugprone-tagged-union-member-count',
  'bugprone-terminating-continue',
  'bugprone-throw-keyword-missing',
  'bugprone-too-small-loop-variable',
  'bugprone-unchecked-optional-access',
  'bugprone-undefined-memory-manipulation',
  'bugprone-undelegated-constructor',
  'bugprone-unhandled-self-assignment',
  'bugprone-unique-ptr-array-mismatch',
  'bugprone-unsafe-functions',
  'bugprone-unused-local-non-trivial-variable',
  'bugprone-unused-raii',
  'bugprone-unused-return-value',
  'bugprone-use-after-move',
  'bugprone-virtual-near-miss',
  'cert-dcl58-cpp',
  'cert-flp30-c',
  'cert-mem57-cpp',
  'cppcoreguidelines-avoid-capturing-lambda-coroutines',
  'cppcoreguidelines-avoid-const-or-ref-data-members',
  'cppcoreguidelines-avoid-do-while',
  'cppcoreguidelines-avoid-goto',
  'cppcoreguidelines-avoid-non-const-global-variables',
  'cppcoreguidelines-avoid-reference-coroutine-parameters',
  'cppcoreguidelines-init-variables',
  'cppcoreguidelines-interfaces-global-init',
  'cppcoreguidelines-macro-usage',
  'cppcoreguidelines-misleading-capture-default-by-value',
  'cppcoreguidelines-missing-std-forward',
  'cppcoreguidelines-no-malloc',
  'cppcoreguidelines-no-suspend-with-lock',
  'cppcoreguidelines-prefer-member-initializer',
  'misc-confusable-identifiers',
  'misc-const-correctness',
  'misc-definitions-in-headers',
  'misc-header-include-cycle',
  'misc-include-cleaner',
  'misc-misleading-bidirectional',
  'misc-misleading-identifier',
  'misc-misplaced-const',
  'misc-new-delete-overloads',
  'misc-no-recursion',
  'misc-non-copyable-objects',
  'misc-non-private-member-variables-in-classes',
  'misc-redundant-expression',
  'misc-static-assert',
  'misc-throw-by-value-catch-by-reference',
  'misc-unconventional-assign-operator',
  'misc-uniqueptr-reset-release',
  'misc-unused-alias-decls',
  'misc-unused-parameters',
  'misc-unused-using-decls',
  'misc-use-anonymous-namespace',
  'misc-use-internal-linkage',
  'modernize-deprecated-headers',
  'modernize-deprecated-ios-base-aliases',
  'modernize-macro-to-enum',
  'modernize-make-shared',
  'modernize-make-unique',
  'modernize-min-max-use-initializer-list',
  'modernize-raw-string-literal',
  'modernize-redundant-void-arg',
  'modernize-replace-auto-ptr',
  'modernize-shrink-to-fit',
  'modernize-type-traits',
  'modernize-unary-static-assert',
  'modernize-use-constraints',
  'modernize-use-equals-default',
  'modernize-use-default-member-init',
  'modernize-use-emplace',
  'modernize-use-equals-delete',
  'modernize-use-integer-sign-comparison',
  'modernize-use-nullptr',
  'modernize-use-override',
  'modernize-use-ranges',
  'modernize-use-starts-ends-with',
  'modernize-use-std-numbers',
  'modernize-use-std-print',
  'modernize-use-uncaught-exceptions',
  'modernize-use-using',
  'performance-enum-size',
  'performance-faster-string-find',
  'performance-for-range-copy',
  'performance-implicit-conversion-in-loop',
  'performance-inefficient-algorithm',
  'performance-inefficient-vector-operation',
  'performance-move-const-arg',
  'performance-move-constructor-init',
  'performance-no-automatic-move',
  'performance-no-int-to-ptr',
  'performance-noexcept-destructor',
  'performance-noexcept-move-constructor',
  'performance-noexcept-swap',
  'performance-trivially-destructible',
  'performance-type-promotion-in-math-fn',
  'performance-unnecessary-copy-initialization',
  'performance-unnecessary-value-param',
  'readability-avoid-const-params-in-decls',
  'readability-avoid-nested-conditional-operator',
  'readability-avoid-return-with-void-value',
  'readability-avoid-unconditional-preprocessor-if',
  'readability-braces-around-statements',
  'readability-const-return-type',
  'readability-container-contains',
  'readability-container-data-pointer',
  'readability-container-size-empty',
  'readability-convert-member-functions-to-static',
  'readability-delete-null-pointer',
  'readability-duplicate-include',
  'readability-else-after-return',
  'readability-enum-initial-value',
  'readability-implicit-bool-conversion',
  'readability-inconsistent-declaration-parameter-name',
  'readability-make-member-function-const',
  'readability-math-missing-parentheses',
  'readability-misleading-indentation',
  'readability-misplaced-array-index',
  'readability-non-const-parameter',
  'readability-operators-representation',
  'readability-redundant-access-specifiers',
  'readability-redundant-casting',
  'readability-redundant-control-flow',
  'readability-redundant-declaration',
  'readability-redundant-function-ptr-dereference',
  'readability-redundant-inline-specifier',
  'readability-redundant-member-init',
  'readability-redundant-preprocessor',
  'readability-redundant-smartptr-get',
  'readability-redundant-string-cstr',
  'readability-redundant-string-init',
  'readability-reference-to-constructed-temporary',
  'readability-simplify-boolean-expr',
  'readability-simplify-subscript-expr',
  'readability-static-accessed-through-instance',
  'readability-static-definition-in-anonymous-namespace',
  'readability-string-compare',
  'readability-uniqueptr-delete-release'
]
CheckOptions:
  - key: bugprone-implicit-widening-of-multiplication-result.UseCXXStaticCastsInCppSources
    value: false
  - key: bugprone-misplaced-widening-cast.CheckImplicitCasts
    value: true
  - key: cppcoreguidelines-avoid-non-const-global-variables.AllowInternalLinkage
    value: true
  - key: misc-include-cleaner.IgnoreHeaders
    value: glm/.*;
  - key: readability-operators-representation.BinaryOperators
    value: '&&;&=;&;|;~;!;!=;||;|=;^;^='
  - key: readability-operators-representation.OverloadedOperators
    value: '&&;&=;&;|;~;!;!=;||;|=;^;^='
WarningsAsErrors: 'true,*'
SystemHeaders: 'false'
---
